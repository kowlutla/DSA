package com.dsa.bit_magic;

/**
 * Given an array arr[] of N positive elements. The task is to find the Maximum
 * AND Value generated by any pair(arri, arrj) from the array such that i != j.
 * Note: AND is bitwise '&' operator.
 */
public class MaximumAndValue {
    // Function for finding the maximum AND value using nested loops
    public static int maxAND1(int arr[], int N) {
        // Initialize max to 0
        int max = 0;
        // Iterate over the array to find the maximum AND value
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                // Calculate the AND value and update max if necessary
                max = Math.max((arr[i] & arr[j]), max);
            }
        }

        return max;
    }

    // Function for finding the maximum AND value without nested loops
    public static int maxAND(int arr[], int N) {
        int result = 0;
        // Iterate from the 31st bit to 0th bit
        for (int pos = 31; pos >= 0; pos--) {
            // Calculate the count of set bits with the updated pattern
            int count = countSetBits((result | (1 << pos)), arr);
            // If the count is greater than or equal to 2, update the result
            if (count >= 2) {
                result = result | (1 << pos);
            }
        }

        return result;
    }

    // Function to count the number of set bits in the pattern within the array
    private static int countSetBits(int pattern, int[] arr) {
        int count = 0;
        // Iterate over the array
        for (int i = 0; i < arr.length; i++) {
            // If the bitwise AND of the array element and pattern equals pattern, increment the count
            if ((arr[i] & pattern) == pattern) {
                count++;
            }
        }

        return count;
    }

    // Main method to test the maxAND functionality
    public static void main(String[] args) {
        // Example usage
        int[] arr = { 4, 8, 12, 16 };
        System.out.println("Using maxAND1: " + maxAND1(arr, arr.length));
        System.out.println("Using maxAND: " + maxAND(arr, arr.length));
    }
}
